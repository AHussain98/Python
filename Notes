python data is strongly typed and dynamically typed, so you cant add a string to a int, but you dont need to declare data types of variables
in python, we can use single quotes or double quotes to enclose strings
in python, all functions return a value
variable assignment is done using the equals symbol, anything on the right of the symbol gets executed first and then the assignmnet happens
you can multiply strings by ints in python, such as when printing them multiple times
input function returns a string by default

Many programming languages support the notion of null.
Null is treated as a special value denoting "not-a-value", something which would let us denote an "empty" or undefined value. 
Python's version of that is the keyword None, which is backed by the class NoneType. 
Note that assigning a variable to None does not get rid of the variable. 
Space is still allocated for the variable - only the value is set to None. 
If you want to remove the variable altogether you may use the del statement

Python strings are not mutable, they cannot be changed. Python strings are also a sequence type

try not to use keywords in filenames, this can cause errors
python is case sensitive
python doesnt have a case/switch statement functionality built in

In C/C++ the statement int a=7 means, memory is allocated for an integer variable called a (the quantity on the LEFT of the = sign) and only then the value 7 is stored in it.
In Python the statement a=7 means, a nameless integer object with value 7 (the quantity on the RIGHT side of the =) is created first and stored somewhere in memory. Then the name a is bound to this object.
The output of the following C++ and Python programs seem to bear this out, but I would like some feedback whether I am right.
C++ produces different memory locations for a and b while a and b seem to refer to the same location in Python (going by the output of the id() function)

C++ code
#include<iostream>
using namespace std;
int main(void)
{
  int a = 7;
  int b = a; 
  cout << &a <<  "  " << &b << endl; // a and b point to different locations in memory
  return 0;
}
Output: 0x7ffff843ecb8 0x7ffff843ecbc

Python: code
a = 7
b = a
print id(a), ' ' , id(b) # a and b seem to refer to the same location
Output: 23093448 23093448


In C and C++, a variable is a named memory location. The value of the variable is the value stored in that location. Assign to the variable and you modify that value. So the variable is the memory location, not the name for it.

In Python, a variable is a name used to refer to an object. The value of the variable is that object. So far sounds like the same thing. But assign to the variable and you don't modify the object itself, rather you alter which object the variable refers to. So the variable is the name, not the object.

For this reason, if you're considering the properties of Python in the abstract, or if you're talking about multiple languages at once, then it's useful to use different names for these two different things. To keep things straight you might avoid talking about variables in Python, and refer to what the assignment operator does as "binding" rather than "assignment".

Python vs C++:
Python much easier to use for scripts and prototypes and proof of concepts or minimum viable products. 
Python is interepereted line by line and you have to download the interpreter as part of the package, this has 
to be done on each host. Python includes garbage collection. Python is quick to write but runs slowly due to 
being interpereted line by line. Python, on the other hand, is not statically typed. 
There is no type checking done at compile time. Hence, the code is prone 
to errors. Python has a massive extensive library and community, so that’s 
something to consider, its very flexible. Python is portable. It is also crossplatform and we can execute programs on any platform.
C++ is much more powerful and performant, as well as being more reliable due to being statically typed. C++ is 
compiled and transformed into machine code to run on the native machine’s hardware, to make the most of 
the hardware and use it efficiently. If a machine’s architecture is different, you probably need to recompile to 
run the .cc file. C++ executes very quickly, but takes a while to write. C++ is a statically typed 
language i.e. the declaration of a variable, the data type of variables, etc. 
are verified at compile time. This keeps the source code error-free at 
runtime. C++ is not portable i.e. we need to recompile the code on every 
different platform. C++ is mainly “Write Once, Compile Anywhere”.
Q #5) Why is C++ faster than Python?
Answer: Given below are the various reasons for which the C++ code runs 
faster than Python:
1. C++ code that is well written spends less time on CPU than Python 
code.
2. There is no interpretation step that’s interpreting the program 
statement by statement.
3. There is no garbage collector running continuously.
4. More control over system calls.
5. We can write a machine-level code easily whenever required.
All these reasons contribute to the faster performance of the C++ code. 
Some features of Python that are listed below are also responsible for its 
slowness.
These are:
6. Python is not compiled but interpreted.
7. There are no primitives in Python, everything is represented as an 
object included built-in data types.
8. A Python list holds objects of different types. This makes each entry 
to hold an additional space to specify the type that adds overhead
